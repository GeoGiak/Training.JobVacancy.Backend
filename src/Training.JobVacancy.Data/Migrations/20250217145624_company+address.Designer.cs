// <auto-generated />
using System;
using Adaptit.Training.JobVacancy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Adaptit.Training.JobVacancy.Data.Migrations
{
    [DbContext(typeof(JobVacancyDbContext))]
    [Migration("20250217145624_company+address")]
    partial class companyaddress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Adaptit.Training.JobVacancy.Data.Entities.Address", b =>
                {
                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.HasKey("Country", "City", "Street", "StreetNumber", "PostalCode");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Adaptit.Training.JobVacancy.Data.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AddressCity")
                        .HasColumnType("text");

                    b.Property<string>("AddressCity1")
                        .HasColumnType("text");

                    b.Property<string>("AddressCountry")
                        .HasColumnType("text");

                    b.Property<string>("AddressCountry1")
                        .HasColumnType("text");

                    b.Property<string>("AddressPostalCode")
                        .HasColumnType("text");

                    b.Property<string>("AddressPostalCode1")
                        .HasColumnType("text");

                    b.Property<string>("AddressStreet")
                        .HasColumnType("text");

                    b.Property<string>("AddressStreet1")
                        .HasColumnType("text");

                    b.Property<string>("AddressStreetNumber")
                        .HasColumnType("text");

                    b.Property<string>("AddressStreetNumber1")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasAnnotation("PhoneNumberFormat", "^[0-9(){}\\-\\+ ]+$");

                    b.Property<bool>("Sponsored")
                        .HasColumnType("boolean");

                    b.Property<int>("TotalJobsAdvertised")
                        .HasColumnType("integer");

                    b.Property<string>("Vat")
                        .HasColumnType("text");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressCountry", "AddressCity", "AddressStreet", "AddressStreetNumber", "AddressPostalCode");

                    b.HasIndex("AddressCountry1", "AddressCity1", "AddressStreet1", "AddressStreetNumber1", "AddressPostalCode1");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Adaptit.Training.JobVacancy.Data.Entities.Company", b =>
                {
                    b.HasOne("Adaptit.Training.JobVacancy.Data.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressCountry", "AddressCity", "AddressStreet", "AddressStreetNumber", "AddressPostalCode");

                    b.HasOne("Adaptit.Training.JobVacancy.Data.Entities.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressCountry1", "AddressCity1", "AddressStreet1", "AddressStreetNumber1", "AddressPostalCode1")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Address");
                });
#pragma warning restore 612, 618
        }
    }
}
